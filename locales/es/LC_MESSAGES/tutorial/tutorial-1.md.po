#
msgid ""
msgstr ""

msgid "Tutorial 1 - Your first app"
msgstr ""

msgid "We're ready to create our first application."
msgstr ""

msgid "Install the BeeWare tools"
msgstr ""

msgid ""
"First, we need to install **Briefcase**. Briefcase is a BeeWare tool that "
"can be used to package your application for distribution to end users - but "
"it can also be used to bootstrap a new project. Make sure you're in the "
"`beeware-tutorial` directory you created in `Tutorial 0 "
"<tutorial-0>`{.interpreted-text role=\"doc\"}, with the `beeware-venv` "
"virtual environment activated, and run:"
msgstr ""

msgid "::: {.admonition} Possible errors during installation"
msgstr ""

msgid ""
"If you see errors during installation, it's almost certainly because some of"
" the system requirements haven't been installed. Make sure you have "
"`installed all the platform pre-requisites <install-"
"dependencies>`{.interpreted-text role=\"ref\"}. ::: ::::"
msgstr ""

msgid ""
"It is important that you use `python -m pip`, rather than a bare `pip`. "
"Briefcase needs to ensure that it has an up-to-date version of `pip` and "
"`setuptools`, and a bare invocation of `pip` can't self-update. If you want "
"to know more, [Brett Cannon has a detailed blog post about the "
"issue](https://snarky.ca/why-you-should-use-python-m-pip/). ::: :::: "
"::::::::"
msgstr ""

msgid "Bootstrap a new project"
msgstr ""

msgid ""
"Let's start our first BeeWare project! We're going to use the Briefcase "
"`new` command to create an application called **Hello World**. Run the "
"following from your command prompt:"
msgstr ""

msgid ""
"Briefcase will ask us for some details of our new application. For the "
"purposes of this tutorial, use the following:"
msgstr ""

msgid "**Formal Name** - Accept the default value: `Hello World`."
msgstr ""

msgid "**App Name** - Accept the default value: `helloworld`."
msgstr ""

msgid ""
"**Bundle Identifier** - If you own your own domain, enter that domain in "
"reversed order. (For example, if you own the domain \"cupcakes.com\", enter "
"`com.cupcakes` as the bundle). If you don't own your own domain, accept the "
"default bundle (`com.example`)."
msgstr ""

msgid "**Project Name** - Accept the default value: `Hello World`."
msgstr ""

msgid ""
"**Description** - Accept the default value (or, if you want to be really "
"creative, come up with your own description!)"
msgstr ""

msgid "**Author** - Enter your own name here."
msgstr ""

msgid ""
"**Author's Email** - Enter your own email address. This will be used in the "
"configuration file, in help text, and anywhere that an email is required "
"when submitting the app to an app store."
msgstr ""

msgid ""
"**Application URL** - The URL of the landing page for your application. "
"Again, if you own your own domain, enter a URL at that domain (including the"
" `https://`). Otherwise, just accept the default URL "
"(`https://example.com/helloworld`). This URL doesn't need to actually exist "
"(for now); it will only be used if you publish your application to an app "
"store."
msgstr ""

msgid ""
"**Project License** - Accept the default license (BSD). This won't affect "
"anything about the operation of the tutorial, though - so if you have "
"particularly strong feelings about license choice, feel free to choose "
"another license."
msgstr ""

msgid ""
"**GUI framework** - Accept the default option, Toga (BeeWare's own GUI "
"toolkit)."
msgstr ""

msgid ""
"Briefcase will then generate a project skeleton for you to use. If you've "
"followed this tutorial so far, and accepted the defaults as described, your "
"file system should look something like:"
msgstr ""

msgid ""
"This skeleton is actually a fully functioning application without adding "
"anything else. The `src` folder contains all the code for the application, "
"the `tests` folder contains an initial test suite, and the `pyproject.toml` "
"file describes how to package the application for distribution. If you open "
"`pyproject.toml` in an editor, you'll see the configuration details you just"
" provided to Briefcase."
msgstr ""

msgid ""
"Now that we have a stub application, we can use Briefcase to run the "
"application."
msgstr ""

msgid "Run the app in developer mode"
msgstr ""

msgid ""
"Move into the `helloworld` project directory and tell briefcase to start the"
" project in Developer (or `dev`) mode:"
msgstr ""

msgid ""
"![Hello World Tutorial 1 window, on "
"macOS](images/macOS/tutorial-1.png){.align-center} :::"
msgstr ""

msgid ""
"![Hello World Tutorial 1 window, on "
"Linux](images/linux/tutorial-1.png){.align-center} :::"
msgstr ""

msgid ""
"![Hello World Tutorial 1 window, on Windows](images/windows/tutorial-1.png)"
msgstr ""

msgid "::: {.admonition} Invalid requirements or pip unable to connect"
msgstr ""

msgid "If you encounter the error:"
msgstr ""

msgid ""
"Confirm that you are running a `version of python that this tutorial "
"supports <install-python>`{.interpreted-text role=\"ref\"}."
msgstr ""

msgid ""
"If your version of python is *not* a supported version, you will have to "
"restart the tutorial. ::: :::: :::::::"
msgstr ""

msgid ""
"Close the application - either by pressing the close button on the "
"application window, by selecting Quit/Exit from the application's menu, or "
"by typing **Ctrl+C** in the terminal where you ran `briefcase dev` - and "
"you're done! Congratulations - you've just written a standalone, native "
"application in Python!"
msgstr ""

msgid ""
"We now have a working application, running in developer mode. Now we can add"
" some logic of our own to make our application do something a little more "
"interesting. In `Tutorial 2 <tutorial-2>`{.interpreted-text role=\"doc\"}, "
"we'll put a more useful user interface onto our application."
msgstr ""

msgid ""
"beeware-tutorial/ ├── beeware-venv/ │   └── ... └── helloworld/     ├── "
"CHANGELOG     ├── LICENSE     ├── pyproject.toml     ├── README.rst     ├── "
"src/     │   └── helloworld/     │       ├── app.py     │       ├── "
"__init__.py     │       ├── __main__.py     │       └── resources/     │"
"           └── README     └── tests/         ├── helloworld.py         ├── "
"__init__.py         └── test_app.py "
msgstr ""
