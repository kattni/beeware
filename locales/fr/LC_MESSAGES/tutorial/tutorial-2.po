#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-19 16:59-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/tutorial/tutorial-2.md:1
msgid "Tutorial 2 - Making it interesting"
msgstr ""

#: docs/tutorial/tutorial-2.md:7
msgid "What was generated"
msgstr ""

#: docs/tutorial/tutorial-2.md:9
msgid ""
"In the `src/helloworld` directory, you should see 3 files: `__init__.py`, "
"`__main__.py` and `app.py`."
msgstr ""

#: docs/tutorial/tutorial-2.md:12
msgid ""
"`__init__.py` marks the `helloworld` directory as an importable Python "
"module. It is an empty file; the very fact it exists tells the Python "
"interpreter that the `helloworld` directory defines a module."
msgstr ""

#: docs/tutorial/tutorial-2.md:16
msgid ""
"`__main__.py` marks the `helloworld` module as a special kind of module -an "
"executable module. If you try to run the `helloworld` module using `python "
"-m helloworld`, the `__main__.py` file is where Python will start executing."
" The contents of `__main__.py` is relatively simple:"
msgstr ""

#: docs/tutorial/tutorial-2.md:26
msgid "This file does two things:"
msgstr ""

#: docs/tutorial/tutorial-2.md:28
msgid "It imports the `main` method from from the `helloworld` app."
msgstr ""

#: docs/tutorial/tutorial-2.md:29
msgid ""
"Then, it starts the application's main loop. The main loop is the way a GUI "
"application listens for user input (like mouse clicks and keyboard presses)."
msgstr ""

#: docs/tutorial/tutorial-2.md:33
msgid ""
"The more interesting file is `app.py` - this contains the logic that creates"
" our application window:"
msgstr ""

#: docs/tutorial/tutorial-2.md:59
msgid "Then, we define a class:"
msgstr ""

#: docs/tutorial/tutorial-2.md:63
msgid ""
"Each Toga application has a single `toga.App` instance, representing the "
"running entity that is the application. The app may end up managing multiple"
" windows; but for simple applications, there will be a single main window."
msgstr ""

#: docs/tutorial/tutorial-2.md:68
msgid "Next, we define a `startup()` method:"
msgstr ""

#: docs/tutorial/tutorial-2.md:82
msgid "Next, we define a window into which we can put this empty box:"
msgstr ""

#: docs/tutorial/tutorial-2.md:94
msgid "::: {.admonition} Where is my window?"
msgstr ""

#: docs/tutorial/tutorial-2.md:97
msgid ""
"If you have made an error in your code, the main window of the app may not "
"display. If this happens, you can type **Ctrl+C** in the terminal where you "
"started the app. This will stop the app. You can then fix the error and "
"restart the app. :::"
msgstr ""

#: docs/tutorial/tutorial-2.md:103
msgid ""
"We then add our empty box as the content of the main window, and instruct "
"the application to show our window:"
msgstr ""

#: docs/tutorial/tutorial-2.md:109
msgid ""
"Last of all, we define a `main()` function. This is what creates the "
"instance of our application:"
msgstr ""

#: docs/tutorial/tutorial-2.md:115
msgid ""
"This `main()` method is the one that is imported and invoked by "
"`__main__.py`. It creates and returns an instance of our `HelloWorld` "
"application."
msgstr ""

#: docs/tutorial/tutorial-2.md:123
msgid "Adding some content of our own"
msgstr ""

#: docs/tutorial/tutorial-2.md:127
msgid ""
"[!NOTE] When you make these changes, make sure you keep the imports at the "
"top of the file, and the `main()` at the bottom of the file. You only need "
"to update the `HelloWorld` class."
msgstr ""

#: docs/tutorial/tutorial-2.md:132
msgid ""
"Modify your `HelloWorld` class inside `src/helloworld/app.py` so that it "
"looks like this:"
msgstr ""

#: docs/tutorial/tutorial-2.md:179
msgid ""
"[!NOTE] For more advanced uses, Toga also supports a separate style object, "
"which is used like this:"
msgstr ""

#: docs/tutorial/tutorial-2.md:186
msgid "Next, we define a couple of widgets:"
msgstr ""

#: docs/tutorial/tutorial-2.md:194
msgid ""
"Here, we define a Label and a TextInput. Both widgets have styles associated"
" with them; the label will have 5px of margin on its left and right, and no "
"margin on the top and bottom. The TextInput is marked as being flexible - "
"that is, it will absorb all available space in its layout axis."
msgstr ""

#: docs/tutorial/tutorial-2.md:204
msgid "Next, we define a box to hold these two widgets:"
msgstr ""

#: docs/tutorial/tutorial-2.md:215
msgid "Now we define a button:"
msgstr ""

#: docs/tutorial/tutorial-2.md:223
msgid ""
"The button also has 5px of margin on all sides. We also define a *handler* "
"-a method to invoke when the button is pressed."
msgstr ""

#: docs/tutorial/tutorial-2.md:226
msgid "Then, we add the name box and the button to the main box:"
msgstr ""

#: docs/tutorial/tutorial-2.md:239
msgid ""
"The last thing we need to do is define the handler for the button. A handler"
" can be any method, generator, or asynchronous coroutine; it accepts the "
"widget that generated the event as an argument, and will be invoked whenever"
" the button is pressed:"
msgstr ""

#: docs/tutorial/tutorial-2.md:247
msgid ""
"The body of the method is a simple print statement - however, it will "
"interrogate the current value of the name input, and use that content as the"
" text that is printed."
msgstr ""

#: docs/tutorial/tutorial-2.md:317
msgid ""
"If you enter a name in the text box, and press the GUI button, you should "
"see output appear in the console where you started the application."
msgstr ""

msgid ""
"In `Tutorial 1 <tutorial-1>`{.interpreted-text role=\"doc\"}, we generated a"
" stub project that was able to run, but we didn't write any code ourselves. "
"Let's take a look at what was generated for us."
msgstr ""

msgid "Let's go through this line by line:"
msgstr ""

msgid ""
"First, we import the `toga` widget toolkit, as well as some style-related "
"utility constants. Our code doesn't use these yet - but we'll make use of "
"them shortly."
msgstr ""

msgid ""
"The first thing the startup method does is to define a main box. Toga's "
"layout scheme behaves similar to HTML. You build an application by "
"constructing a collection of boxes, each of which contains other boxes, or "
"actual widgets. You then apply styles to these boxes to define how they will"
" consume the available window space."
msgstr ""

msgid ""
"In this application, we define a single box, but we don't put anything into "
"it."
msgstr ""

msgid ""
"This creates an instance of a `toga.MainWindow`, which will have a title "
"matching the application's name. A Main Window is a special kind of window "
"in Toga - it's a window that is closely bound to the life cycle of the app. "
"When the Main Window is closed, the application exits. The Main Window is "
"also the window that has the application's menu (if you're on a platform "
"like Windows where menu bars are part of the window)."
msgstr ""

msgid ""
"That's the simplest possible Toga application. Let's put some of our own "
"content into the application, and make the app do something interesting."
msgstr ""

msgid "Let's do something more interesting with our `HelloWorld` app."
msgstr ""

msgid "Let's look in detail at what has changed."
msgstr ""

msgid "We're still creating a main box; however, we are now applying a style:"
msgstr ""

msgid ""
"Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS."
" You define objects in a hierarchy - in HTML, the objects are `<div>`, "
"`<span>`, and other DOM elements; in Toga, they're widgets and boxes. You "
"can then assign styles to the individual elements. In this case, we're "
"indicating that this is a `COLUMN` box - that is, it is a box that will "
"consume all the available width, and will expand its height as content is "
"added, but it will try to be as short as possible."
msgstr ""

msgid ""
"The TextInput is assigned as an instance variable of the class. This gives "
"us easy access to the widget instance - something that we'll use in a "
"moment."
msgstr ""

msgid ""
"The `name_box` is a box just like the main box; however, this time, it's a "
"`ROW` box. That means content will be added horizontally, and it will try to"
" make its width as narrow as possible. The box also has some margin - 5px on"
" all sides."
msgstr ""

msgid ""
"This completes our layout; the rest of the startup method is as it was "
"previously - defining a `MainWindow`, and assigning the main box as the "
"window's content:"
msgstr ""

msgid ""
"Now that we've made these changes we can see what they look like by starting"
" the application again. As before, we'll use developer mode:"
msgstr ""

msgid ""
"You'll notice that this time, it *doesn't* install dependencies. Briefcase "
"can detect that the application has been run before, and to save time, will "
"only run the application. If you add new dependencies to your app, you need "
"to make sure that they're installed by passing in a `-r` option when you run"
" `briefcase dev`."
msgstr ""

msgid ""
"![Hello World Tutorial 2 window, on "
"macOS](images/macOS/tutorial-2.png){.align-center} :::"
msgstr ""

msgid ""
"![Hello World Tutorial 2 window, on "
"Linux](images/linux/tutorial-2.png){.align-center} :::"
msgstr ""

msgid ""
"![Hello World Tutorial 2 window, on "
"Windows](images/windows/tutorial-2.png){.align-center} ::: ::::::"
msgstr ""

msgid ""
"Before continuing, close the app. As with Tutorial 1, you can do this by "
"pressing the close button on the application window, by selecting Quit/Exit "
"from the application's menu, or by typing **Ctrl+C** in the terminal where "
"you ran `briefcase dev`."
msgstr ""

msgid ""
"We've now got an application that does something a little more interesting. "
"But it only runs on our own computer. Let's package this application for "
"distribution. In `Tutorial 3 <tutorial-3>`{.interpreted-text role=\"doc\"}, "
"we'll wrap our application up as a standalone installer that we could send "
"to a friend, a customer, or upload to an App Store."
msgstr ""

msgid ""
"from helloworld.app import main  if __name__ == \"__main__\":     "
"main().main_loop() "
msgstr ""

msgid ""
"import toga from toga.style.pack import COLUMN, ROW  class "
"HelloWorld(toga.App):     def startup(self):         main_box = toga.Box()"
"          self.main_window = toga.MainWindow(title=self.formal_name)"
"         self.main_window.content = main_box         self.main_window.show()"
"  def main():     return HelloWorld() "
msgstr ""

msgid "import toga from toga.style.pack import COLUMN, ROW "
msgstr ""

msgid "class HelloWorld(toga.App): "
msgstr ""

msgid "def startup(self):     main_box = toga.Box() "
msgstr ""

msgid "self.main_window = toga.MainWindow(title=self.formal_name) "
msgstr ""

msgid "self.main_window.content = main_box self.main_window.show() "
msgstr ""

msgid "def main():     return HelloWorld() "
msgstr ""

msgid ""
"class HelloWorld(toga.App):     def startup(self):         main_box = "
"toga.Box(direction=COLUMN)          name_label = toga.Label(             "
"\"Your name: \",             margin=(0, 5),         )         "
"self.name_input = toga.TextInput(flex=1)          name_box = "
"toga.Box(direction=ROW, margin=5)         name_box.add(name_label)         "
"name_box.add(self.name_input)          button = toga.Button(             "
"\"Say Hello!\",             on_press=self.say_hello,             margin=5,"
"         )          main_box.add(name_box)         main_box.add(button)"
"          self.main_window = toga.MainWindow(title=self.formal_name)"
"         self.main_window.content = main_box         self.main_window.show()"
"      def say_hello(self, widget):         print(f\"Hello, "
"{self.name_input.value}\") "
msgstr ""

msgid "main_box = toga.Box(direction=COLUMN) "
msgstr ""

msgid ""
"from toga.style import Pack main_box = "
"toga.Box(style=Pack(direction=COLUMN)) "
msgstr ""

msgid ""
"name_label = toga.Label(     \"Your name: \",     margin=(0, 5), ) "
"self.name_input = toga.TextInput(flex=1) "
msgstr ""

msgid ""
"name_box = toga.Box(direction=ROW, margin=5) name_box.add(name_label) "
"name_box.add(self.name_input) "
msgstr ""

msgid ""
"button = toga.Button(     \"Say Hello!\",     on_press=self.say_hello,     "
"margin=5, ) "
msgstr ""

msgid "main_box.add(name_box) main_box.add(button) "
msgstr ""

msgid ""
"self.main_window = toga.MainWindow(title=self.formal_name) "
"self.main_window.content = main_box self.main_window.show() "
msgstr ""

msgid ""
"def say_hello(self, widget):     print(f\"Hello, {self.name_input.value}\") "
msgstr ""

#~ msgid ""
#~ "In `Tutorial 1 <tutorial-1>`{.interpreted-text role=\"doc\"}, we generated a"
#~ " stub project that was able to run, but we didn\\'t write any code "
#~ "ourselves. Let\\'s take a look at what was generated for us."
#~ msgstr ""

#~ msgid "Let\\'s go through this line by line:"
#~ msgstr ""

#~ msgid ""
#~ "First, we import the `toga` widget toolkit, as well as some style-related "
#~ "utility constants. Our code doesn\\'t use these yet - but we\\'ll make use "
#~ "of them shortly."
#~ msgstr ""

#~ msgid ""
#~ "The first thing the startup method does is to define a main box. Toga\\'s "
#~ "layout scheme behaves similar to HTML. You build an application by "
#~ "constructing a collection of boxes, each of which contains other boxes, or "
#~ "actual widgets. You then apply styles to these boxes to define how they will"
#~ " consume the available window space."
#~ msgstr ""

#~ msgid ""
#~ "In this application, we define a single box, but we don\\'t put anything "
#~ "into it."
#~ msgstr ""

#~ msgid ""
#~ "This creates an instance of a `toga.MainWindow`, which will have a title "
#~ "matching the application\\'s name. A Main Window is a special kind of window"
#~ " in Toga - it\\'s a window that is closely bound to the life cycle of the "
#~ "app. When the Main Window is closed, the application exits. The Main Window "
#~ "is also the window that has the application\\'s menu (if you\\'re on a "
#~ "platform like Windows where menu bars are part of the window)."
#~ msgstr ""

#~ msgid ""
#~ "That\\'s the simplest possible Toga application. Let\\'s put some of our own"
#~ " content into the application, and make the app do something interesting."
#~ msgstr ""

#~ msgid "Let\\'s do something more interesting with our `HelloWorld` app."
#~ msgstr ""

#~ msgid "Let\\'s look in detail at what has changed."
#~ msgstr ""

#~ msgid "We\\'re still creating a main box; however, we are now applying a style:"
#~ msgstr ""

#~ msgid ""
#~ "Toga\\'s built-in layout system is called \\\"Pack\\\". It behaves a lot "
#~ "like CSS. You define objects in a hierarchy - in HTML, the objects are "
#~ "`<div>`, `<span>`, and other DOM elements; in Toga, they\\'re widgets and "
#~ "boxes. You can then assign styles to the individual elements. In this case, "
#~ "we\\'re indicating that this is a `COLUMN` box - that is, it is a box that "
#~ "will consume all the available width, and will expand its height as content "
#~ "is added, but it will try to be as short as possible."
#~ msgstr ""

#~ msgid ""
#~ "The TextInput is assigned as an instance variable of the class. This gives "
#~ "us easy access to the widget instance - something that we\\'ll use in a "
#~ "moment."
#~ msgstr ""

#~ msgid ""
#~ "The `name_box` is a box just like the main box; however, this time, it\\'s a"
#~ " `ROW` box. That means content will be added horizontally, and it will try "
#~ "to make its width as narrow as possible. The box also has some margin - 5px "
#~ "on all sides."
#~ msgstr ""

#~ msgid ""
#~ "This completes our layout; the rest of the startup method is as it was "
#~ "previously - defining a `MainWindow`, and assigning the main box as the "
#~ "window\\'s content:"
#~ msgstr ""

#~ msgid ""
#~ "Now that we\\'ve made these changes we can see what they look like by "
#~ "starting the application again. As before, we\\'ll use developer mode:"
#~ msgstr ""

#~ msgid ""
#~ "You\\'ll notice that this time, it *doesn\\'t* install dependencies. "
#~ "Briefcase can detect that the application has been run before, and to save "
#~ "time, will only run the application. If you add new dependencies to your "
#~ "app, you need to make sure that they\\'re installed by passing in a `-r` "
#~ "option when you run `briefcase dev`."
#~ msgstr ""

#~ msgid "![Hello World Tutorial 2 window, on macOS]{1}{.align-center} :::"
#~ msgstr ""

#~ msgid "![Hello World Tutorial 2 window, on Linux]{1}{.align-center} :::"
#~ msgstr ""

#~ msgid ""
#~ "![Hello World Tutorial 2 window, on Windows]{1}{.align-center} ::: ::::::"
#~ msgstr ""

#~ msgid ""
#~ "Before continuing, close the app. As with Tutorial 1, you can do this by "
#~ "pressing the close button on the application window, by selecting Quit/Exit "
#~ "from the application\\'s menu, or by typing **Ctrl+C** in the terminal where"
#~ " you ran `briefcase dev`."
#~ msgstr ""

#~ msgid ""
#~ "We\\'ve now got an application that does something a little more "
#~ "interesting. But it only runs on our own computer. Let\\'s package this "
#~ "application for distribution. In `Tutorial 3 <tutorial-3>`{.interpreted-text"
#~ " role=\"doc\"}, we\\'ll wrap our application up as a standalone installer "
#~ "that we could send to a friend, a customer, or upload to an App Store."
#~ msgstr ""
