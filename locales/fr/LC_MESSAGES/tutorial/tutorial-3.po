#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-02 17:56-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/tutorial/tutorial-3.md:1
msgid "Tutorial 3 - Packaging for distribution"
msgstr ""

#: docs/tutorial/tutorial-3.md:3
msgid ""
"So far, we\\'ve been running our application in \\\"Developer mode\\\". This "
"makes it easy for us to run our application locally - but what we really "
"want is to be able to give our application to others."
msgstr ""

#: docs/tutorial/tutorial-3.md:7
msgid ""
"However, we don\\'t want to have to teach our users how to install Python, "
"create a virtual environment, clone a git repository, and run Briefcase in "
"developer mode. We\\'d rather just give them an installer, and have the "
"application Just Work."
msgstr ""

#: docs/tutorial/tutorial-3.md:12
msgid ""
"Briefcase can be used to package your application for distribution in this "
"way."
msgstr ""

#: docs/tutorial/tutorial-3.md:15
msgid "Creating your application scaffold {: #someid }"
msgstr ""

#: docs/tutorial/tutorial-3.md:17
msgid ""
"Since this is the first time we\\'re packaging our application, we need to "
"create some configuration files and other scaffolding to support the "
"packaging process. From the `helloworld` directory, run:"
msgstr ""

#: docs/tutorial/tutorial-3.md:21
#: docs/tutorial/tutorial-3.md:196
msgid "::::::: {.tabs} ::: {.group-tab} macOS"
msgstr ""

#: docs/tutorial/tutorial-3.md:49
#: docs/tutorial/tutorial-3.md:307
#: docs/tutorial/tutorial-3.md:335
msgid ":::"
msgstr ""

#: docs/tutorial/tutorial-3.md:51
msgid ":::: {.group-tab} Linux"
msgstr ""

#: docs/tutorial/tutorial-3.md:85
msgid "::: {.admonition} Errors about Python versions"
msgstr ""

#: docs/tutorial/tutorial-3.md:88
msgid "If you receive an error that reads something like:"
msgstr ""

#: docs/tutorial/tutorial-3.md:90
msgid ""
"The version of Python being used to run Briefcase (3.12) is not the system "
"python3 (3.10)."
msgstr ""

#: docs/tutorial/tutorial-3.md:93
msgid ""
"You will need to recreate your virtual environment using the system `python3`"
". Using the system Python is a requirement for packaging your application. "
"::: ::::"
msgstr ""

#: docs/tutorial/tutorial-3.md:99
#: docs/tutorial/tutorial-3.md:337
#: docs/tutorial/tutorial-3.md:555
msgid "::: {.group-tab} Windows"
msgstr ""

#: docs/tutorial/tutorial-3.md:123
msgid "::: :::::::"
msgstr ""

#: docs/tutorial/tutorial-3.md:126
msgid ""
"You\\'ve probably just seen pages of content go past in your terminal\\... "
"so what just happened? Briefcase has done the following:"
msgstr ""

#: docs/tutorial/tutorial-3.md:129
msgid ""
"It **generated an application template**. There\\'s a lot of files and "
"configurations required to build a native installer, above and beyond the "
"code of your actual application. This extra scaffolding is almost the same "
"for every application on the same platform, except for the name of the "
"actual application being constructed - so Briefcase provides an application "
"template for each platform it supports. This step rolls out the template, "
"substituting the name of your application, bundle ID, and other properties "
"of your configuration file as required to support the platform you\\'re "
"building on."
msgstr ""

#: docs/tutorial/tutorial-3.md:129
msgid ""
"If you\\'re not happy with the template provided by Briefcase, you can "
"provide your own. However, you probably don\\'t want to do this until you\\"
"'ve got a bit more experience using Briefcase\\'s default template."
msgstr ""

#: docs/tutorial/tutorial-3.md:145
msgid ""
"It **downloaded and installed a support package**. The packaging approach "
"taken by Briefcase is best described as \\"
"\"the simplest thing that could possibly work\\\" - it ships a complete, "
"isolated Python interpreter as part of every application it builds (except "
"for Linux native system package builds). This is slightly space inefficient -"
" if you have 5 applications packaged with Briefcase, you\\'ll have 5 copies "
"of the Python interpreter. However, this approach guarantees that every "
"application is completely independent, using a specific version of Python "
"that is known to work with the application."
msgstr ""

#: docs/tutorial/tutorial-3.md:145
msgid ""
"Again, Briefcase provides a default support package for each platform; if "
"you want, you can provide your own support package, and have that package "
"included as part of the build process. You may want to do this if you have "
"particular options in the Python interpreter that you need to have enabled, "
"or if you want to strip modules out of the standard library that you don\\'t "
"need at runtime."
msgstr ""

#: docs/tutorial/tutorial-3.md:145
msgid ""
"Briefcase maintains a local cache of support packages, so once you\\'ve "
"downloaded a specific support package, that cached copy will be used on "
"future builds."
msgstr ""

#: docs/tutorial/tutorial-3.md:145
msgid ""
"As noted above, when Briefcase packages an app as a native Linux system "
"package (the default package format for Linux), a support package is not "
"included with the app. Instead, the app will use the Python that is provided "
"by the distribution of Linux being targeted."
msgstr ""

#: docs/tutorial/tutorial-3.md:172
msgid ""
"It **installed application requirements**. Your application can specify any "
"third-party modules that are required at runtime. These will be installed "
"using `pip` into your application\\'s installer."
msgstr ""

#: docs/tutorial/tutorial-3.md:176
msgid ""
"It **Installed your application code**. Your application will have its own "
"code and resources (e.g., images that are needed at runtime); these files "
"are copied into the installer."
msgstr ""

#: docs/tutorial/tutorial-3.md:180
msgid ""
"It **installed your resources needed by your application.** Lastly, it adds "
"any additional resources that are needed by the installer itself. This "
"includes things like icons that need to be attached to the final application "
"and splash screen images."
msgstr ""

#: docs/tutorial/tutorial-3.md:185
msgid ""
"Once this completes, if you look in the project directory, you should now "
"see a directory corresponding to your platform (`macOS`, `linux`, or "
"`windows`) that contains additional files. This is the platform-specific "
"packaging configuration for your application."
msgstr ""

#: docs/tutorial/tutorial-3.md:190
msgid "Building your application"
msgstr ""

#: docs/tutorial/tutorial-3.md:192
msgid ""
"You can now compile your application. This step performs any binary "
"compilation that is necessary for your application to be executable on your "
"target platform."
msgstr ""

#: docs/tutorial/tutorial-3.md:211
msgid ""
"On macOS, the `build` command doesn\\'t need to *compile* anything, but it "
"does need to sign the contents of binary so that it can be executed. This "
"signature is an *ad hoc* signature - it will only work on *your* machine; if "
"you want to distribute the application to others, you\\'ll need to provide a "
"full signature. :::"
msgstr ""

#: docs/tutorial/tutorial-3.md:218
#: docs/tutorial/tutorial-3.md:309
#: docs/tutorial/tutorial-3.md:440
msgid "::: {.group-tab} Linux"
msgstr ""

#: docs/tutorial/tutorial-3.md:245
msgid ""
"Once this step completes, the `build` folder will contain a "
"`helloworld-0.0.1` folder that contains a mirror of a Linux `/usr` file "
"system. This file system mirror will contain a `bin` folder with a "
"`helloworld` binary, plus `lib` and `share` folders needed to support the "
"binary. :::"
msgstr ""

#: docs/tutorial/tutorial-3.md:252
msgid ":::: {.group-tab} Windows"
msgstr ""

#: docs/tutorial/tutorial-3.md:262
msgid ""
"On Windows, the `build` command doesn\\'t need to *compile* anything, but it "
"does need to write some metadata so that the application knows its name, "
"version, and so on."
msgstr ""

#: docs/tutorial/tutorial-3.md:266
msgid "::: {.admonition} Triggering antivirus"
msgstr ""

#: docs/tutorial/tutorial-3.md:269
msgid ""
"Since this metadata is being written directly in to the pre-compiled binary "
"rolled out from the template during the `create` command, this may trigger "
"antivirus software running on your machine and prevent the metadata from "
"being written. In that case, instruct the antivirus to allow the tool (named "
"`rcedit-x64.exe`) to run and re-run the command above. ::: :::: :::::::"
msgstr ""

#: docs/tutorial/tutorial-3.md:279
msgid "Running your app"
msgstr ""

#: docs/tutorial/tutorial-3.md:281
msgid "You can now use Briefcase to run your application:"
msgstr ""

#: docs/tutorial/tutorial-3.md:283
#: docs/tutorial/tutorial-3.md:387
msgid ":::::: {.tabs} ::: {.group-tab} macOS"
msgstr ""

#: docs/tutorial/tutorial-3.md:359
msgid "::: ::::::"
msgstr ""

#: docs/tutorial/tutorial-3.md:362
msgid ""
"This will start to run your native application, using the app bundle created "
"by the `build` command."
msgstr ""

#: docs/tutorial/tutorial-3.md:365
msgid ""
"You might notice some small differences in the way your application looks "
"when it\\'s running. For example, icons and the name displayed by the "
"operating system may be slightly different to those you saw when running "
"under developer mode. This is also because you\\'re using the packaged "
"application, not just running Python code. From the operating system\\'s "
"perspective, you\\'re now running \\\"an app\\\", not \\"
"\"a Python program\\\", and this is reflected in how the application appears."
msgstr ""

#: docs/tutorial/tutorial-3.md:373
msgid ""
"Before continuing, close the app. As with previous tutorial steps, you can "
"do this by pressing the close button on the application window, by selecting "
"Quit/Exit from the application\\'s menu, or by typing **Ctrl+C** in the "
"terminal where you ran `briefcase dev`."
msgstr ""

#: docs/tutorial/tutorial-3.md:378
msgid "Building your installer"
msgstr ""

#: docs/tutorial/tutorial-3.md:380
msgid ""
"You can now package your application for distribution, using the `package` "
"command. The package command does any compilation that is required to "
"convert the scaffolded project into a final, distributable product. "
"Depending on the platform, this may involve compiling an installer, "
"performing code signing, or doing other pre-distribution tasks."
msgstr ""

#: docs/tutorial/tutorial-3.md:420
msgid ""
"The `dist` folder will contain a file named `Hello World-0.0.1.dmg`. If you "
"locate this file in the Finder, and double click on its icon, you\\'ll mount "
"the DMG, giving you a copy of the Hello World app, and a link to your "
"Applications folder for easy installation. Drag the app file into "
"Applications, and you\\'ve installed your application. Send the DMG file to "
"a friend, and they should be able to do the same."
msgstr ""

#: docs/tutorial/tutorial-3.md:427
msgid ""
"In this example, we\\'ve used the `--adhoc-sign` option - that is, we\\'re "
"signing our application with *ad hoc* credentials - temporary credentials "
"that will only work on your machine. We\\'ve done this to keep the tutorial "
"simple. Setting up code signing identities is a little fiddly, and they\\'re "
"only *required* if you\\'re intending to distribute your application to "
"others. If we were publishing a real application for others to use, we would "
"need to specify real credentials."
msgstr ""

#: docs/tutorial/tutorial-3.md:435
msgid ""
"When you\\'re ready to publish a real application, check out the Briefcase "
"How-To guide on [Setting up a macOS code signing identity]{1}. :::"
msgstr ""

#: docs/tutorial/tutorial-3.md:443
msgid ""
"The output of the package step will be slightly different depending on your "
"Linux distribution. If you\\'re on a Debian-derived distribution, you\\'ll "
"see:"
msgstr ""

#: docs/tutorial/tutorial-3.md:465
msgid "The `dist` folder will contain the `.deb` file that was generated."
msgstr ""

#: docs/tutorial/tutorial-3.md:467
msgid "If you\\'re on a RHEL-based distribution, you\\'ll see:"
msgstr ""

#: docs/tutorial/tutorial-3.md:494
msgid "The `dist` folder will contain the `.rpm` file that was generated."
msgstr ""

#: docs/tutorial/tutorial-3.md:496
msgid "If you\\'re on an Arch-based distribution, you\\'ll see:"
msgstr ""

#: docs/tutorial/tutorial-3.md:514
msgid ""
"The `dist` folder will contain the `.pkg.tar.zst` file that was generated."
msgstr ""

#: docs/tutorial/tutorial-3.md:517
msgid "Other Linux distributions aren\\'t currently supported for packaging."
msgstr ""

#: docs/tutorial/tutorial-3.md:519
msgid ""
"If you want to build a package for a Linux distribution other than the one "
"you\\'re using, Briefcase can also help - but you\\'ll need to install "
"Docker."
msgstr ""

#: docs/tutorial/tutorial-3.md:523
msgid ""
"Official installers for [Docker Engine]{1} are available for a range of Unix "
"distributions. Follow the instructions for your platform; however, ensure "
"you don\\'t install Docker in \\\"rootless\\\" mode."
msgstr ""

#: docs/tutorial/tutorial-3.md:528
msgid ""
"Once you\\'ve installed Docker, you should be able to start an Linux "
"container - for example:"
msgstr ""

#: docs/tutorial/tutorial-3.md:535
msgid ""
"will show you a Unix prompt (something like `root@84444e31cff9:/#`) inside "
"an Ubuntu 22.04 Docker container. Type Ctrl-D to exit Docker and return to "
"your local shell."
msgstr ""

#: docs/tutorial/tutorial-3.md:539
msgid ""
"Once you\\'ve got Docker installed, you can use Briefcase to build a package "
"for any Linux distribution that Briefcase supports by passing in a Docker "
"image as an argument. For example, to build a DEB package for Ubuntu 22.04 "
"(Jammy), regardless of the operating system you\\'re on, you can run:"
msgstr ""

#: docs/tutorial/tutorial-3.md:549
msgid ""
"This will download the Docker image for your selected operating system, "
"create a container that is able to run Briefcase builds, and build the app "
"package inside the image. Once it\\'s completed, the `dist` folder will "
"contain the package for the target Linux distribution. :::"
msgstr ""

#: docs/tutorial/tutorial-3.md:586
msgid ""
"In this example, we\\'re not signing our app. As a result, when you use the "
"installer, you\\'ll get a system warning that the application comes from an "
"unknown developer. We\\'ve done this to keep the tutorial simple. Setting up "
"code signing identities is a little fiddly, and they\\'re only *required* if "
"you\\'re intending to distribute your application to others. If we were "
"publishing a real application for others to use, we would need to specify a "
"real signing identity; when that signed app is installed, the system will "
"notify the user that the application is from the known identity associated "
"with the certificate."
msgstr ""

#: docs/tutorial/tutorial-3.md:596
msgid ""
"When you\\'re ready to publish a real application, check out the Briefcase "
"How-To guide on [Setting up a Windows code signing identity]{1}."
msgstr ""

#: docs/tutorial/tutorial-3.md:600
msgid ""
"Once this step completes, the `dist` folder will contain a file named "
"`Hello_World-0.0.1.msi`. If you double click on this installer to run it, "
"you should go through a familiar Windows installation process. Once this "
"installation completes, there will be a \\\"Hello World\\\" entry in your "
"start menu. ::: ::::::"
msgstr ""

#: docs/tutorial/tutorial-3.md:608
msgid "Next steps"
msgstr ""

#: docs/tutorial/tutorial-3.md:610
msgid ""
"We now have our application packaged for distribution on desktop platforms. "
"But what happens when we need to update the code in our application? How do "
"we get those updates into our packaged application? Turn to `Tutorial 4 <./"
"tutorial-4>`{.interpreted-text role=\"doc\"} to find out\\..."
msgstr ""
