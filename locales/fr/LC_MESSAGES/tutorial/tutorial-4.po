#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-19 19:48-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 3.15.6\n"

#: docs/tutorial/tutorial-4.md:1
msgid "Tutorial 4 - Updating your application"
msgstr ""

#: docs/tutorial/tutorial-4.md:10
msgid "So - how do you update your installed app when you make code changes?"
msgstr ""

#: docs/tutorial/tutorial-4.md:12
msgid "Updating application code"
msgstr ""

#: docs/tutorial/tutorial-4.md:34
msgid ""
"This directs Toga to open a modal dialog box when the button is pressed."
msgstr ""

#: docs/tutorial/tutorial-4.md:69
msgid ""
"So - we need to tell briefcase to update your app, copying in the new "
"version of the code. We *could* do this by deleting the old platform "
"directory and starting from scratch. However, Briefcase provides an easier "
"way - you can update the code for your existing bundled application:"
msgstr ""

#: docs/tutorial/tutorial-4.md:140
msgid ""
"(macOS users, remember that as noted in `Tutorial 3 "
"<tutorial-3>`{.interpreted-text role=\"doc\"}, for the tutorial we recommend"
" running `briefcase package` with the `--adhoc-sign` flag to avoid the "
"complexity of setting up a code signing identity and keep the tutorial as "
"simple as possible.)"
msgstr ""

#: docs/tutorial/tutorial-4.md:146
msgid "Update and run in one step"
msgstr ""

#: docs/tutorial/tutorial-4.md:164
msgid ""
"At the top of the file, between the imports and the `class HelloWorld` "
"definition, add a utility method to generate an appropriate greeting "
"depending on the value of the name that has been provided:"
msgstr ""

#: docs/tutorial/tutorial-4.md:174
msgid "Then, modify the `say_hello` callback to use this new utility method:"
msgstr ""

#: docs/tutorial/tutorial-4.md:184
msgid ""
"Run your app in development mode (with `briefcase dev`) to confirm that the "
"new logic works; then update, build and run the app with one command:"
msgstr ""

#: docs/tutorial/tutorial-4.md:260
msgid ""
"The package command also accepts the `-u` argument, so if you make a change "
"to your application code and want to repackage immediately, you can run "
"`briefcase package -u`."
msgstr ""

msgid ""
"In the last tutorial, we packaged our application as a native application. "
"If you're dealing with a real-world app, that isn't going to be the end of "
"the story - you'll likely do some testing, discover problems, and need to "
"make some changes. Even if your application is perfect, you'll eventually "
"want to publish version 2 of your application with improvements."
msgstr ""

msgid ""
"Our application currently prints to the console when you press the button. "
"However, GUI applications shouldn't really use the console for output. They "
"need to use dialogs to communicate with users."
msgstr ""

msgid ""
"Let's add a dialog box to say hello, instead of writing to the console. "
"Modify the `say_hello` callback so it looks like this:"
msgstr ""

msgid ""
"We need to make the method `async` so that when we display the dialog, the "
"rest of the application continues to run. Don't worry about this detail too "
"much right now -we'll give a more detailed explanation in `Tutorial 8 "
"<tutorial-8>`{.interpreted-text role=\"doc\"}."
msgstr ""

msgid ""
"If you run `briefcase dev`, enter a name, and press the button, you'll see "
"the new dialog box:"
msgstr ""

msgid ""
"![Hello World Tutorial 4 dialog, on "
"macOS](images/macOS/tutorial-4.png){.align-center} :::"
msgstr ""

msgid ""
"![Hello World Tutorial 4 dialog, on "
"Linux](images/linux/tutorial-4.png){.align-center} :::"
msgstr ""

msgid ""
"![Hello World Tutorial 4 dialog, on "
"Windows](images/windows/tutorial-4.png){.align-center} ::: ::::::"
msgstr ""

msgid "However, if you run `briefcase run`, the dialog box won't appear."
msgstr ""

msgid ""
"Why is this? Well, `briefcase dev` operates by running your code in place "
"-it tries to produce as realistic runtime environment for your code as "
"possible, but it doesn't provide or use any of the platform infrastructure "
"for wrapping your code as an application. Part of the process of packaging "
"your app involves copying your code *into* the application bundle - and at "
"the moment, your application still has the old code in it."
msgstr ""

msgid ""
"If Briefcase can't find the scaffolded template, it will automatically "
"invoke `create` to generate a fresh scaffold."
msgstr ""

msgid ""
"Now that we've updated the installer code, we can then run `briefcase build`"
" to re-compile the app, `briefcase run` to run the updated app, and "
"`briefcase package` to repackage the application for distribution."
msgstr ""

msgid ""
"If you're rapidly iterating code changes, you'll likely want to make a code "
"change, update the application, and immediately re-run your application. For"
" most purposes, developer mode (`briefcase dev`) will be the easiest way to "
"do this sort of rapid iteration; however, if you're testing something about "
"how your application runs as a native binary, or hunting a bug that only "
"manifests when your application is in packaged form, you may need to use "
"repeated calls to `briefcase run`. To simplify the process of updating and "
"running the bundled app, Briefcase has a shortcut to support this usage "
"pattern - the `-u` (or `--update`) option on the `run` command."
msgstr ""

msgid ""
"Let's try making another change. You may have noticed that if you don't type"
" a name in the text input box, the dialog will say \"Hello, \". Let's modify"
" the `say_hello` function again to handle this edge case."
msgstr ""

msgid ""
"We now have our application packaged for distribution on desktop platforms, "
"and we've been able to update the code in our application."
msgstr ""

msgid ""
"But what about mobile? In `Tutorial 5 <tutorial-5/index>`{.interpreted-text "
"role=\"doc\"}, we'll convert our application into a mobile application, and "
"deploy it onto a device simulator, and onto a phone."
msgstr ""

#~ msgid ""
#~ "In the last tutorial, we packaged our application as a native application. "
#~ "If you\\'re dealing with a real-world app, that isn\\'t going to be the end "
#~ "of the story - you\\'ll likely do some testing, discover problems, and need "
#~ "to make some changes. Even if your application is perfect, you\\'ll "
#~ "eventually want to publish version 2 of your application with improvements."
#~ msgstr ""

#~ msgid ""
#~ "Our application currently prints to the console when you press the button. "
#~ "However, GUI applications shouldn\\'t really use the console for output. "
#~ "They need to use dialogs to communicate with users."
#~ msgstr ""

#~ msgid ""
#~ "Let\\'s add a dialog box to say hello, instead of writing to the console. "
#~ "Modify the `say_hello` callback so it looks like this:"
#~ msgstr ""

#~ msgid ""
#~ "We need to make the method `async` so that when we display the dialog, the "
#~ "rest of the application continues to run. Don\\'t worry about this detail "
#~ "too much right now -we\\'ll give a more detailed explanation in `Tutorial 8 "
#~ "<tutorial-8>`{.interpreted-text role=\"doc\"}."
#~ msgstr ""

#~ msgid ""
#~ "If you run `briefcase dev`, enter a name, and press the button, you\\'ll see"
#~ " the new dialog box:"
#~ msgstr ""

#~ msgid "![Hello World Tutorial 4 dialog, on macOS]{1}{.align-center} :::"
#~ msgstr ""

#~ msgid "![Hello World Tutorial 4 dialog, on Linux]{1}{.align-center} :::"
#~ msgstr ""

#~ msgid ""
#~ "![Hello World Tutorial 4 dialog, on Windows]{1}{.align-center} ::: ::::::"
#~ msgstr ""

#~ msgid "However, if you run `briefcase run`, the dialog box won\\'t appear."
#~ msgstr ""

#~ msgid ""
#~ "Why is this? Well, `briefcase dev` operates by running your code in place "
#~ "-it tries to produce as realistic runtime environment for your code as "
#~ "possible, but it doesn\\'t provide or use any of the platform infrastructure"
#~ " for wrapping your code as an application. Part of the process of packaging "
#~ "your app involves copying your code *into* the application bundle - and at "
#~ "the moment, your application still has the old code in it."
#~ msgstr ""

#~ msgid ""
#~ "If Briefcase can\\'t find the scaffolded template, it will automatically "
#~ "invoke `create` to generate a fresh scaffold."
#~ msgstr ""

#~ msgid ""
#~ "Now that we\\'ve updated the installer code, we can then run `briefcase "
#~ "build` to re-compile the app, `briefcase run` to run the updated app, and "
#~ "`briefcase package` to repackage the application for distribution."
#~ msgstr ""

#~ msgid ""
#~ "If you\\'re rapidly iterating code changes, you\\'ll likely want to make a "
#~ "code change, update the application, and immediately re-run your "
#~ "application. For most purposes, developer mode (`briefcase dev`) will be the"
#~ " easiest way to do this sort of rapid iteration; however, if you\\'re "
#~ "testing something about how your application runs as a native binary, or "
#~ "hunting a bug that only manifests when your application is in packaged form,"
#~ " you may need to use repeated calls to `briefcase run`. To simplify the "
#~ "process of updating and running the bundled app, Briefcase has a shortcut to"
#~ " support this usage pattern - the `-u` (or `--update`) option on the `run` "
#~ "command."
#~ msgstr ""

#~ msgid ""
#~ "Let\\'s try making another change. You may have noticed that if you don\\'t "
#~ "type a name in the text input box, the dialog will say \\\"Hello, \\\". "
#~ "Let\\'s modify the `say_hello` function again to handle this edge case."
#~ msgstr ""

#~ msgid ""
#~ "We now have our application packaged for distribution on desktop platforms, "
#~ "and we\\'ve been able to update the code in our application."
#~ msgstr ""

#~ msgid ""
#~ "But what about mobile? In `Tutorial 5 <tutorial-5/index>`{.interpreted-text "
#~ "role=\"doc\"}, we\\'ll convert our application into a mobile application, "
#~ "and deploy it onto a device simulator, and onto a phone."
#~ msgstr ""

#~ msgid ""
#~ "async def say_hello(self, widget):     await self.main_window.dialog("
#~ "         toga.InfoDialog(             f\"Hello, {self.name_input.value}\","
#~ "             \"Hi there!\",         )     ) "
#~ msgstr ""

#~ msgid ""
#~ "def greeting(name):     if name:         return f\"Hello, {name}\"     else:"
#~ "         return \"Hello, stranger\" "
#~ msgstr ""

#~ msgid ""
#~ "async def say_hello(self, widget):     await self.main_window.dialog("
#~ "         toga.InfoDialog(             greeting(self.name_input.value),"
#~ "             \"Hi there!\",         )     ) "
#~ msgstr ""
